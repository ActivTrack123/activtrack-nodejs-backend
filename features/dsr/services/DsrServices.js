const DSR = require('../models/DsrModel');
const mongoose = require('mongoose');

const DSRService = module.exports;

DSRService.createDSR = async function (payload, request) {
    const {
        kam,
        bookingReference,
        super: superField,
        consignee,
        merchandiser,
        pos,
        shipmentType,
        cfs1,
        voyage,
        customerReference,
        qty,
        transhipmentPorts,
        etd,
        agentReference,
        packageType,
        vessel,
        atd,
        originAgent,
        weight,
        voyage2,
        eta,
        cargoReadyDate,
        cbm,
        legEtd,
        ata,
        bookingType,
        gp,
        legAtd,
        mblNo,
        portReceipt,
        hc,
        legEta,
        hblNo,
        portOfLoading,
        incoterm,
        legAta,
        containerNumber,
        portOfDischarge,
        bookingConfirmed,
        cfsCutOff,
        devaning,
        route,
        cargoReceived,
        vessel1,
        status
    } = payload;

    try {
        const newDSR = await DSR.create({
            _id: new mongoose.Types.ObjectId(),
            kam,
            bookingReference,
            super: superField,
            consignee,
            merchandiser,
            pos,
            shipmentType,
            cfs1,
            voyage,
            customerReference,
            qty,
            transhipmentPorts,
            etd,
            agentReference,
            packageType,
            vessel: { name: vessel },
            atd,
            originAgent,
            weight,
            voyage2,
            eta,
            cargoReadyDate,
            cbm,
            legEtd,
            ata,
            bookingType,
            gp,
            legAtd,
            mblNo,
            portReceipt,
            hc,
            legEta,
            hblNo,
            portOfLoading,
            incoterm,
            legAta,
            containerNumber,
            portOfDischarge,
            bookingConfirmed,
            cfsCutOff,
            devaning,
            route,
            cargoReceived,
            vessel1,
            status
        });

        return newDSR;
    } catch (err) {
        return { error: err };
    }
};

DSRService.updateDSR = async function (payload, request) {
    const {
        kam,
        bookingReference,
        super: superField,
        consignee,
        merchandiser,
        pos,
        shipmentType,
        cfs1,
        voyage,
        customerReference,
        qty,
        transhipmentPorts,
        etd,
        agentReference,
        packageType,
        vessel,
        atd,
        originAgent,
        weight,
        voyage2,
        eta,
        cargoReadyDate,
        cbm,
        legEtd,
        ata,
        bookingType,
        gp,
        legAtd,
        mblNo,
        portReceipt,
        hc,
        legEta,
        hblNo,
        portOfLoading,
        incoterm,
        legAta,
        containerNumber,
        portOfDischarge,
        bookingConfirmed,
        cfsCutOff,
        devaning,
        route,
        cargoReceived,
        vessel1,
        status
    } = payload;

    try {
        const { id } = request.params;
        const dsr = await DSR.findByIdAndUpdate(id, {
            kam,
            bookingReference,
            super: superField,
            consignee,
            merchandiser,
            pos,
            shipmentType,
            cfs1,
            voyage,
            customerReference,
            qty,
            transhipmentPorts,
            etd,
            agentReference,
            packageType,
            vessel: { name: vessel },
            atd,
            originAgent,
            weight,
            voyage2,
            eta,
            cargoReadyDate,
            cbm,
            legEtd,
            ata,
            bookingType,
            gp,
            legAtd,
            mblNo,
            portReceipt,
            hc,
            legEta,
            hblNo,
            portOfLoading,
            incoterm,
            legAta,
            containerNumber,
            portOfDischarge,
            bookingConfirmed,
            cfsCutOff,
            devaning,
            route,
            cargoReceived,
            vessel1,
            status
        });

        return dsr;
    } catch (err) {
        return { error: err };
    }
};
